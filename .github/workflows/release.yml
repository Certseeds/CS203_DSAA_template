# This is a basic workflow to help you get started with Actions

name: test and release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags-ignore:
      - '*-release'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-ubuntu:
    name: test for release
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-18.04, ubuntu-latest ]
        gcc_v: [ 11 ] # Version of G++,GCC
    env:
      GCC_V: ${{ matrix.gcc_v }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout code
        uses: actions/checkout@v2

      - name: Install GCC-11,G++-11
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update && sudo apt-get install -y gcc-${GCC_V} g++-${GCC_V}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 111
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${GCC_V} 111

      - name: prepare libopencv
        run: |
          sudo apt update && sudo apt install libopencv-dev

      - name: Use cmake
        run: cmake --version

      - name: prepare folder
        run: cmake -E make_directory ./CMAKE_DEBUG_PATH

      - name: cmake prepare for compile
        working-directory: ./CMAKE_DEBUG_PATH
        run: cmake .. -DCMAKE_BUILD_TYPE=DEBUG -DMULTIPLY_TIMES=0

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/lab_00
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/algorithm/2021F
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/algorithm/matrix
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/algorithm/
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH
        run: cmake --build . --config DEBUG --parallel

      - name: cmake test
        working-directory: ./CMAKE_DEBUG_PATH
        run: ctest  --parallel $(nproc)
        if: ${{matrix.os != 'windows-latest'}}

  test-windows:
    name: test for release
    runs-on: windows-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: Use cmake
        run: cmake --version

      - name: prepare folder
        run: cmake -E make_directory ./CMAKE_DEBUG_PATH

      - name: cmake prepare for compile
        working-directory: ./CMAKE_DEBUG_PATH
        run: cmake .. -DCMAKE_BUILD_TYPE=DEBUG -DMULTIPLY_TIMES=0

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/lab_00
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/algorithm/2021F
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/algorithm/matrix
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH/algorithm/
        run: cmake --build . --config DEBUG --parallel

      - name: cmake compile
        working-directory: ./CMAKE_DEBUG_PATH
        run: cmake --build . --config DEBUG --parallel

  # This workflow contains a single job called "build"
  build:
    name: publish release
    if: github.repository == 'Certseeds/CS203_DSAA_template'
    needs: [ test-ubuntu,test-windows ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout code
        uses: actions/checkout@v2

      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: tag name output
        run: |
          echo ${SOURCE_NAME};echo ${SOURCE_BRANCH};echo ${SOURCE_TAG}
        env:
          SOURCE_NAME: ${{ steps.branch_name.outputs.SOURCE_NAME }}
          SOURCE_BRANCH: ${{ steps.branch_name.outputs.SOURCE_BRANCH }}
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}

      # ensure the path and files of project
      - name: ensure the path and files of project
        run: sudo apt install tree; tree

      - name: run script
        working-directory: ./script
        run: python3 file_template.py

      - name: zip the packet
        working-directory: ./../
        run: |
          zip -r script_no_need.zip ./CS203_DSAA_template -x "*/.git/*"
          tree

      - name: release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{steps.branch_name.outputs.SOURCE_TAG}}"
          prerelease: false
          title: "${{steps.branch_name.outputs.SOURCE_TAG}}"
          files: ./../script_no_need.zip

      - name: tree
        run: tree
