#include <list>
#include <array>
#include <deque>
#include <queue>
#include <stack>
#include <tuple>
#include <string>
#include <vector>
#include <numeric>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>

#ifdef CS203_DSAA_TEST_MACRO
namespace lab_{0}_{1}{{
#endif

using std::cin;
using std::tie;
using std::cout;
using std::list;
using std::sort;
using std::array;
using std::deque;
using std::queue;
using std::stack;
using std::tuple;
using std::string;
using std::vector;
using std::unordered_map;
using std::unordered_set;
using std::priority_queue;
static constexpr const char end{{'\n'}};

using num_t = int32_t;
using input_type = tuple<num_t, num_t>;
using output_type = num_t;

inline input_type read();

output_type cal(input_type data);

void output(const output_type &data);

int main() {{
    auto input_data = read();
    auto output_data = cal(input_data);
    output(output_data);
    return 0;
}}

inline input_type read() {{
    num_t a{{0}},b{{0}};
    std::cin >> a >> b;
    return std::make_tuple(a, b);
}}

output_type cal(input_type data) {{
    num_t a{{0}},b{{0}};
    tie(a, b) = data;
    num_t c = a + b;
    return c;
}}

void output(const output_type &data) {{
    cout << data << end;
}}
static const auto faster_streams = [] {{
    srand(time(nullptr));
    // use time to init the random seed
    std::ios::sync_with_stdio(false);
    std::istream::sync_with_stdio(false);
    std::ostream::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    // 关闭c++风格输入输出 , 与C风格输入输出的同步,提高性能.
    return 0;
}}();
#ifdef CS203_DSAA_TEST_MACRO
}}
#endif
